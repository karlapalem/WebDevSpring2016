{
  "name": "ng-dialog",
  "version": "0.5.9",
  "homepage": "https://github.com/likeastore/ngDialog",
  "description": "Modal dialogs and popups provider for Angular.js applications",
  "main": "./js/ngDialog.js",
  "style": "./css/ngDialog.css",
  "scripts": {
    "pretest": "npm install && bower install --allow-root",
    "test": "./node_modules/karma/bin/karma start --single-run --browsers PhantomJS",
    "test-min": "./node_modules/karma/bin/karma start --single-run --browsers PhantomJS --min",
    "test-watch": "./node_modules/karma/bin/karma start --auto-watch --browsers PhantomJS",
    "serve": "node server",
    "webdriver-update": "node_modules/.bin/webdriver-manager update --standalone",
    "webdriver": "node_modules/.bin/webdriver-manager start",
    "preprotractor": "npm install && bower install --allow-root",
    "protractor": "node_modules/.bin/protractor protractor.conf.js",
    "protractor-a11y": "node_modules/.bin/protractor protractor.conf.js --a11y",
    "protractor-console": "node_modules/.bin/protractor protractor.conf.js --console-error",
    "build": "grunt build",
    "start": "node server.js"
  },
  "directories": {
    "test": "tests"
  },
  "keywords": [
    "angular.js",
    "modals",
    "popups",
    "dialog",
    "ng",
    "provider",
    "factory",
    "directive"
  ],
  "author": {
    "name": "Dmitri Voronianski",
    "email": "dmitri.voronianski@gmail.com",
    "url": "http://pixelhunter.me"
  },
  "bugs": {
    "url": "https://github.com/likeastore/ngDialog/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/likeastore/ngDialog"
  },
  "readmeFilename": "README.md",
  "license": "MIT",
  "devDependencies": {
    "express": "^4.13.3",
    "grunt": "^0.4.5",
    "grunt-contrib-cssmin": "^0.14.0",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-contrib-uglify": "^0.9.2",
    "grunt-myth": "^1.0.1",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.9",
    "karma-coverage": "^0.5.2",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "^0.2.1",
    "myth": "^1.5.0",
    "phantomjs": "^1.9.18",
    "protractor": "^2.2.0"
  },
  "readme": "<!-- ### LOOKING FOR MAINTAINER. PLEASE PING [@voronianski](https://twitter.com/voronianski)! -->\n# ngDialog\n\n[![build status](http://img.shields.io/travis/likeastore/ngDialog.svg)](https://travis-ci.org/likeastore/ngDialog)\n[![npm version](http://badge.fury.io/js/ng-dialog.svg)](http://badge.fury.io/js/ng-dialog)\n[![github tag](https://img.shields.io/github/tag/likeastore/ngDialog.svg)](https://github.com/likeastore/ngDialog/tags)\n[![Download Count](https://img.shields.io/npm/dm/ng-dialog.svg)](http://www.npmjs.com/package/ng-dialog)\n[![Code Climate](https://codeclimate.com/github/likeastore/ngDialog/badges/gpa.svg)](https://codeclimate.com/github/likeastore/ngDialog)\n[![Issue Stats](http://issuestats.com/github/likeastore/ngdialog/badge/pr?style=flat)](http://issuestats.com/github/likeastore/ngDialog)\n[![Issue Stats](http://issuestats.com/github/likeastore/ngdialog/badge/issue?style=flat)](http://issuestats.com/github/likeastore/ngDialog)\n\n> Modal dialogs and popups provider for [AngularJS](http://angularjs.org/) applications.\n\nngDialog is ~10KB (minified), has minimalistic API, is highly customizable through themes and has only AngularJS as dependency.\n\n### [Demo](http://likeastore.github.io/ngDialog)\n\n## Install\n\nYou can download all necessary ngDialog files manually, or install it with bower:\n\n```bash\nbower install ng-dialog\n```\n\nor npm:\n\n```bash\nnpm install ng-dialog\n```\n\n## Usage\n\nYou need only to include ``ngDialog.js``,  ``ngDialog.css`` and  ``ngDialog-theme-default.css`` (as minimal setup) to your project and then you can start using the ``ngDialog`` provider in your directives, controllers and services. \nDefine the className to be the ``ngDialog-theme-default``. \nFor example in controllers:\n\n```javascript\nvar app = angular.module('exampleApp', ['ngDialog']);\n\napp.controller('MainCtrl', function ($scope, ngDialog) {\n    $scope.clickToOpen = function () {\n        ngDialog.open({ template: 'popupTmpl.html', className: 'ngdialog-theme-default' });\n    };\n});\n```\n\n## Collaboration\n\nYour help is appreciated! If you've found a bug or if something is not clear, please raise an issue.\n\nIdeally, if you've found an issue, you will submit a PR that meets our [contributor guidelines][contributor-guidelines].\n\n## API\n\nngDialog service provides easy to use and minimalistic API, but in the same time it's powerful enough. Here is the list of accessible methods that you can use:\n\n===\n\n### ``.open(options)``\n\nMethod allows to open dialog window, creates new dialog instance on each call. It accepts ``options`` object as the only argument.\n\n#### Options:\n\n##### ``template {String}``\n\nDialog template can be loaded through ``path`` to external html template or ``<script>`` tag with ``text/ng-template``:\n\n```html\n<script type=\"text/ng-template\" id=\"templateId\">\n    <h1>Template heading</h1>\n    <p>Content goes here</p>\n</script>\n```\n\n```javascript\nngDialog.open({ template: 'templateId' });\n```\n\nAlso it is possible to use a simple string as template together with ``plain`` option.\n\n##### Pro Tip about templates\n\nIt's not always necessary to place your external html template inside ``<script>`` tag. You could put these templates into ``$templateCache`` like this:\n\n```javascript\nangular.module('dialog.templates').run([$templateCache, function($templateCache) {\n    $templateCache.put('templateId', 'template content');\n}]);\n```\n\nThen it would be possible to include the ``dialog.templates`` module into the dependencies of your main module and start using this template as ``templateId``.\n\nThere is no need to do these actions manually.\nYou could use one of the plugins specifically for these purposes. They are available for different build systems including most popular Gulp / Grunt:\n\n- [gulp-angular-templatecache](https://github.com/miickel/gulp-angular-templatecache)\n- [gulp-ng-html2js](https://www.npmjs.com/package/gulp-ng-html2js)\n- [grunt-html2js](https://github.com/karlgoldstein/grunt-html2js)\n- [broccoli-html2js](https://www.npmjs.com/package/broccoli-html2js)\n\nYou could find more detailed examples on each of these pages.\n\n##### ``plain {Boolean}``\n\nIf ``true`` allows to use plain string as template, default ``false``:\n\n```javascript\nngDialog.open({\n    template: '<p>my template</p>',\n    plain: true\n});\n```\n\n##### ``controller {String} | {Array} | {Object}``\n\nController that will be used for the dialog window if necessary. The controller can be specified either by referring it by name or directly inline.\n\n```javascript\nngDialog.open({\n    template: 'externalTemplate.html',\n    controller: 'SomeController'\n});\n```\n\nor\n\n```javascript\nngDialog.open({\n    template: 'externalTemplate.html',\n    controller: ['$scope', 'otherService', function($scope, otherService) {\n        // controller logic\n    }]\n});\n```\n\n##### ``controllerAs {String} ``\n\nYou could optionally specify `controllerAs` parameter for your controller. Then inside your template it will be possible to refer this controller by the value specified by `controllerAs`.\n\nUsage of `controllerAs` syntax is currently recommended by the AngularJS team.\n\n##### ``resolve {Object.<String, Function>}``\n\nAn optional map of dependencies which should be injected into the controller.\nIf any of these dependencies are promises, ngDialog will wait for them all to be resolved\nor one to be rejected before the controller is instantiated.\n\nIf all the promises are resolved successfully, the values of the resolved promises are\ninjected.\n\nThe map object\nis:\n- `key` â€“ `{String}`: a name of a dependency to be injected into the controller.\n- `factory` - `{String | Function}`: If `String` then it is an alias for a service.\n  Otherwise if `Function`, then it is injected using `$injector.invoke` and the return\n  value is treated as the dependency. If the result is a promise, it is resolved\n  before its value is injected into the controller.\n\n\n```javascript\nngDialog.open({\n    controller: function Ctrl(dep) {/*...*/},\n    resolve: {\n        dep: function depFactory() {\n            return 'dep value';\n        }\n    }\n});\n```\n\n##### ``scope {Object}``\n\nScope object that will be passed to the dialog. If you use a controller with separate ``$scope`` service this object will be passed to the ``$scope.$parent`` param:\n\n```javascript\n$scope.value = true;\n\nngDialog.open({\n    template: 'externalTemplate.html',\n    className: 'ngdialog-theme-plain',\n    scope: $scope\n});\n```\n\n```html\n<script type=\"text/ng-template\" id=\"externalTemplate.html\">\n<p>External scope: <code>{{value}}</code></p>\n</script>\n```\n\n##### ``scope.closeThisDialog(value)``\n\nIn addition ``.closeThisDialog(value)`` method gets injected to passed ``$scope``. This allows you to close the dialog straight from the handler in a popup element, for example:\n\n```html\n<div class=\"dialog-contents\">\n    <input type=\"text\"/>\n    <input type=\"button\" value=\"OK\" ng-click=\"checkInput() && closeThisDialog('Some value')\"/>\n</div>\n```\n\nAny value passed to this function will be attached to the object which resolves on the close promise for this dialog. For dialogs opened with the ``openConfirm()`` method the value is used as the reject reason.\n\n##### ``data {String | Object | Array}``\n\nAny serializable data that you want to be stored in the controller's dialog scope. (``$scope.ngDialogData``). From version `0.3.6` `$scope.ngDialogData` keeps references to the objects instead of copying them.\n\nAdditionally, you will have the dialog id available as ``$scope.ngDialogId``. If you are using ``$scope.ngDialogData``, it'll be also available under ``$scope.ngDialogData.ngDialogId``.\n\n##### ``className {String}``\n\nThis option allows you to control the dialog's look, you can use built-in [themes](https://github.com/likeastore/ngDialog#themes) or create your own styled modals.\n\nThis example enables one of the built-in ngDialog themes - ``ngdialog-theme-default`` (do not forget to include necessary css files):\n\n```javascript\nngDialog.open({\n    template: 'templateId',\n    className: 'ngdialog-theme-default'\n});\n```\nNote: If the className is not mentioned, the dialog will not display correctly.\n\nCheck [themes](https://github.com/likeastore/ngDialog#themes) block to learn more.\n\n##### ``appendClassName {String}``\n\nUnlike the `className` property, which overrides any default classes specified through the `setDefaults()` method ([see docs](https://github.com/likeastore/ngDialog#setdefaultsoptions)), `appendClassName` allows for the addition of a class on top of any defaults.\n\nFor example, the following would add both the `ngdialog-theme-default` and `ngdialog-custom` classes to the dialog opened:\n\n```javascript\nngDialogProvider.setDefaults({\n    className: 'ngdialog-theme-default'\n});\n```\n```javascript\nngDialog.open({\n    template: 'template.html',\n    appendClassName: 'ngdialog-custom'\n});\n```\n\n##### ``disableAnimation {Boolean}``\n\nIf ``true`` then animation for the dialog will be disabled, default ``false``.\n\n##### ``overlay {Boolean}``\n\nIf ``false`` it allows to hide the overlay div behind the modals, default ``true``.\n\n##### ``showClose {Boolean}``\n\nIf ``false`` it allows to hide the close button on modals, default ``true``.\n\n##### ``closeByEscape {Boolean}``\n\nIt allows to close modals by clicking the ``Esc`` key, default ``true``.\n\nThis will close all open modals if there are several of them opened at the same time.\n\n##### ``closeByNavigation {Boolean}``\n\nIt allows to close modals on state change (history.back, $state.go, etc.), default ``false``.\nCompatible with ui-router and angular-router.\nSet this value to true if you want your modal to close when you go back or change state.\nSet this value to false if you want your modal to stay open when you change state within your app.\n\nThis will close all open modals if there are several of them opened at the same time.\n\n##### ``closeByDocument {Boolean}``\n\nIt allows to close modals by clicking on overlay background, default ``true``. If [Hammer.js](https://github.com/EightMedia/hammer.js) is loaded, it will listen for ``tap`` instead of ``click``.\n\n##### ``appendTo {String}``\n\nSpecify your element where to append dialog instance, accepts selector string (e.g. ``#yourId``, ``.yourClass``). If not specified appends dialog to ``body`` as default behavior.\n\n##### ``cache {Boolean}``\n\nPass ``false`` to disable template caching. Useful for developing purposes, default is ``true``.\n\n##### ``name {String} | {Number}``\n\nGive a name for a dialog instance. It is useful for identifying specific dialog if there are multiple dialog boxes opened.\n\n##### ``preCloseCallback {String} | {Function}``\n\nProvide either the name of a function or a function to be called before the dialog is closed.  If the callback function specified in the option returns ``false`` then the dialog will not be closed. Alternatively, if the callback function returns a promise that gets resolved the dialog will be closed.\n\nThe ``preCloseCallback`` function receives as a parameter ``value`` which is the same value sent to ``.close(id, value)``.\n\nThe primary use case for this feature is a dialog which contains user actions (e.g. editing data) for which you want the ability to confirm whether to discard unsaved changes upon exiting the dialog (e.g. via the escape key).\n\nThis example uses an inline function with a ``window.confirm`` call in the ``preCloseCallback`` function:\n\n```javascript\nngDialog.open({\n    preCloseCallback: function(value) {\n        if (confirm('Are you sure you want to close without saving your changes?')) {\n            return true;\n        }\n        return false;\n    }\n});\n```\n\nIn another example, a callback function with a nested confirm ngDialog is used:\n\n```javascript\nngDialog.open({\n    preCloseCallback: function(value) {\n        var nestedConfirmDialog = ngDialog.openConfirm({\n            template:'\\\n                <p>Are you sure you want to close the parent dialog?</p>\\\n                <div class=\"ngdialog-buttons\">\\\n                    <button type=\"button\" class=\"ngdialog-button ngdialog-button-secondary\" ng-click=\"closeThisDialog(0)\">No</button>\\\n                    <button type=\"button\" class=\"ngdialog-button ngdialog-button-primary\" ng-click=\"confirm(1)\">Yes</button>\\\n                </div>',\n            plain: true\n        });\n\n        // NOTE: return the promise from openConfirm\n        return nestedConfirmDialog;\n    }\n});\n```\n\n##### ``trapFocus {Boolean}``\n\nWhen ``true``, ensures that the focused element remains within the dialog to conform to accessibility recommendations. Default value is ``true``\n\n##### ``preserveFocus {Boolean}``\n\nWhen ``true``, closing the dialog restores focus to the element that launched it. Designed to improve keyboard accessibility. Default value is ``true``\n\n##### ``ariaAuto {Boolean}``\n\nWhen ``true``, automatically selects appropriate values for any unspecified accessibility attributes. Default value is ``true``\n\nSee [Accessibility](#Accessibility) for more information.\n\n##### ``ariaRole {String}``\n\nSpecifies the value for the ``role`` attribute that should be applied to the dialog element. Default value is ``null`` (unspecified)\n\nSee [Accessibility](#Accessibility) for more information.\n\n##### ``ariaLabelledById {String}``\n\nSpecifies the value for the ``aria-labelledby`` attribute that should be applied to the dialog element. Default value is ``null`` (unspecified)\n\nIf specified, the value is not validated against the DOM. See [Accessibility](#Accessibility) for more information.\n\n##### ``ariaLabelledBySelector {String}``\n\nSpecifies the CSS selector for the element to be referenced by the ``aria-labelledby`` attribute on the dialog element. Default value is ``null`` (unspecified)\n\nIf specified, the first matching element is used. See [Accessibility](#Accessibility) for more information.\n\n##### ``ariaDescribedById {String}``\n\nSpecifies the value for the ``aria-describedby`` attribute that should be applied to the dialog element. Default value is ``null`` (unspecified)\n\nIf specified, the value is not validated against the DOM. See [Accessibility](#Accessibility) for more information.\n\n##### ``ariaDescribedBySelector {String}``\n\nSpecifies the CSS selector for the element to be referenced by the ``aria-describedby`` attribute on the dialog element. Default value is ``null`` (unspecified)\n\nIf specified, the first matching element is used. See [Accessibility](#Accessibility) for more information.\n\n#### Returns:\n\nThe ``open()`` method returns an object with some useful properties.\n\n##### ``id {String}``\n\nThis is the ID of the dialog which was just created. It is the ID on the dialog's DOM element.\n\n##### ``close(value) {Function}``\n\nThis is a function which will close the dialog which was opened by the current call to ``open()``. It takes an optional value to pass to the close promise.\n\n##### ``closePromise {Promise}``\n\nA promise which will resolve when the dialog is closed. It is resolved with an object containing: ``id`` - the ID of the closed dialog, ``value`` - the value the dialog was closed with, ``$dialog`` - the dialog element which at this point has been removed from the DOM and ``remainingDialogs`` - the number of dialogs still open.\n\nThe value property will be a special string if the dialog is dismissed by one of the built in mechanisms: `'$escape'`, `'$closeButton'` or `'$document'`.\n\nThis allows you do to something like this:\n\n```javascript\nvar dialog = ngDialog.open({\n    template: 'templateId'\n});\n\ndialog.closePromise.then(function (data) {\n    console.log(data.id + ' has been dismissed.');\n});\n```\n\n===\n\n### ``.setDefaults(options)``\n\nYou're able to set default settings through ``ngDialogProvider``:\n\n```javascript\nvar app = angular.module('myApp', ['ngDialog']);\napp.config(['ngDialogProvider', function (ngDialogProvider) {\n    ngDialogProvider.setDefaults({\n        className: 'ngdialog-theme-default',\n        plain: true,\n        showClose: true,\n        closeByDocument: true,\n        closeByEscape: true\n    });\n}]);\n```\n\n===\n\n### ``.openConfirm(options)``\n\nOpens a dialog that by default does not close when hitting escape or clicking outside the dialog window. The function returns a promise that is either resolved or rejected depending on the way the dialog was closed.\n\n#### Options:\n\nThe options are the same as the regular [``.open()``](https://github.com/likeastore/ngDialog#options) method with an extra function added to the scope:\n\n##### ``scope.confirm()``\n\nIn addition to the ``.closeThisDialog()`` method. The method ``.confirm()`` is also injected to passed ``$scope``. Use this method to close the dialog and ``resolve`` the promise that was returned when opening the modal.\n\nThe function accepts a single optional parameter which is used as the value of the resolved promise.\n\n```html\n<div class=\"dialog-contents\">\n    Some message\n    <button ng-click=\"closeThisDialog()\">Cancel</button>\n    <button ng-click=\"confirm()\">Confirm</button>\n</div>\n```\n\n#### Returns:\n\nAn Angular promise object that is resolved if the ``.confirm()`` function is used to close the dialog, otherwise the promise is rejected. The resolve value and the reject reason is defined by the value passed to the ``confirm()`` or ``closeThisDialog()`` call respectively.\n\n===\n\n### ``.isOpen(id)``\n\nMethod accepts dialog's ``id`` and returns a ``Boolean`` value indicating whether the specified dialog is open.\n\n===\n\n### ``.close(id, value)``\n\nMethod accepts dialog's ``id`` as string argument to close specific dialog window, if ``id`` is not specified it will close all currently active modals (same behavior as ``.closeAll()``). Takes an optional value to resolve the dialog promise with (or all dialog promises).\n\n===\n\n### ``.closeAll(value)``\n\nMethod manages closing all active modals on the page. Takes an optional value to resolve all of the dialog promises with.\n\n===\n\n### ``.getOpenDialogs()``\n\nMethod that returns array which includes the ids of opened dialogs.\n\n===\n\n### ``.setForceHtmlReload({Boolean})``\n\nAdds an additional listener on every ``$locationChangeSuccess`` event and gets update version of ``html`` into dialog. May be useful in some rare cases when you're dependant on DOM changes, defaults to ``false``. Use it in module's config as provider instance:\n\n```javascript\nvar app = angular.module('exampleApp', ['ngDialog']);\n\napp.config(function (ngDialogProvider) {\n    ngDialogProvider.setForceHtmlReload(true);\n});\n```\n\n===\n\n### ``.setForceBodyReload({Boolean})``\n\nAdds additional listener on every ``$locationChangeSuccess`` event and gets updated version of ``body`` into dialog. Maybe useful in some rare cases when you're dependant on DOM changes, defaults to ``false``. Use it in module's config as provider instance:\n\n```javascript\nvar app = angular.module('exampleApp', ['ngDialog']);\n\napp.config(function (ngDialogProvider) {\n    ngDialogProvider.setForceBodyReload(true);\n});\n```\n\n===\n\n### ``.setOpenOnePerName({Boolean})``\nDefault value: false \n\nDefine whether or not opening a dialog with the same name more than once simultaneously is allowed. Assigning true prevents opening a second dialog.\n\nSetting it in the ngDialogProvider:\n```javascript\nvar app = angular.module('exampleApp', ['ngDialog']);\n\napp.config(function (ngDialogProvider) {\n    ngDialogProvider.setOpenOnePerName(true);\n});\n```\n\nMake sure to remember to add a 'name' when opening a dialog.\n**ngDialog 'open' and 'openConfirm' functions will return `undefined` if the dialog was not opened.**\n\n## Directive\n\nBy default the ngDialog module is served with the ``ngDialog`` directive which can be used as attribute for buttons, links, etc. Almost all ``.open()`` options are available through tag attributes as well, the only difference is that ``ng-template`` id or path of template file is required.\n\nSome imaginary button, for example, will look like:\n\n```html\n<button type=\"button\"\n    ng-dialog=\"templateId.html\"\n    ng-dialog-class=\"ngdialog-theme-flat\"\n    ng-dialog-controller=\"ModalCtrl\"\n    ng-dialog-close-previous>\n    Open modal text\n</button>\n```\n\nYou could optionally use ``ng-dialog-bind-to-controller`` to bind scope you've defined via parameter of directive to controller.\nMore information about bindToController is available [here](http://blog.thoughtram.io/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html).\n\nDirective contains one more additional but very useful option, it's an attribute named ``ng-dialog-close-previous``. It allows you to close previously opened dialogs automatically.\n\n## Events\n\nEverytime ngDialog is opened or closed we're broadcasting three events (dispatching events downwards to all child scopes):\n\n- ``ngDialog.opened``\n\n- ``ngDialog.closing``\n\n- ``ngDialog.closed``\n\nThis allows you to register your own listeners, example:\n\n```javascript\n$rootScope.$on('ngDialog.opened', function (e, $dialog) {\n    console.log('ngDialog opened: ' + $dialog.attr('id'));\n});\n```\n\n``ngDialog.closing`` is different than ``ngDialog.closed`` in that it is fired immediately when the dialog begins closing, whereas ``ngDialog.closed`` is fired after all animations are complete. Both will be fired even when animation end support is not detected.\n\nAdditionally we trigger following 2 events related to loading of template for dialog:\n\n- ``ngDialog.templateLoading``\n\n- ``ngDialog.templateLoaded``\n\nIn case you are loading your templates from an external location, you could use above events to show some kind of loader.\n\nFinally, we trigger the following event when adding padding to or removing padding from the body tag to compensate for scrollbar toggling:\n\n- ``ngDialog.setPadding``\n\nThe ``ngDialog.setPadding`` event will communicate the pixel value being added to the body tag so you can add it to any other elements in your layout at the same time (often fixed-position elements will need this).\n\n\n## Themes\n\nCurrently _ngDialog_ contains two default themes that show how easily you can create your own. Check ``example`` folder for demonstration purposes.\n\n## Accessibility\n\nngDialog supports accessible keyboard navigation via the ``trapFocus`` and ``preserveFocus`` options.\n\nThe ``role``, ``aria-labelledby`` and ``aria-describedby`` attributes are also supported, and are rendered as follows.\n\nDialog ``role`` attribute:\n\n* ``options.ariaRole``, if specified\n* \"dialog\" if ``options.ariaAuto`` is ``true`` and the dialog contains any focusable elements\n* \"alertdialog\" is ``options.ariaAuto`` is ``true`` and the dialog does *not* contain any focusable elements\n\nDialog ``aria-labelledby`` attribute:\n\n* ``options.ariaLabelledById``, if specified\n* If ``options.ariaLabelledBySelector`` is specified, the first matching element will be found and assigned an id (if required) and that id will be used\n* If ``options.ariaAuto`` is ``true``, the first heading element in the dialog (h1-6) will be found and processed as per ``ariaLabelledBySelector``\n\nDialog ``aria-describedby`` attribute:\n\n* ``options.ariaDescribedById``, if specified\n* If ``options.ariaDescribedBySelector`` is specified, the first matching element will be found and assigned an id (if required) and that id will be used\n* If ``options.ariaAuto`` is ``true``, the first content element in the dialog (article,section,p) will be found and processed as per ``ariaDescribedBySelector``\n\nDialog Content ``role`` attribute:\n\n* Always assigned a value of \"document\"\n\n## CDN\n\n_ngDialog_ is available for public on [cdnjs](http://cdnjs.com/libraries/ng-dialog). For example, please use following urls for version ``0.4.0``.\n\n```html\n//cdnjs.cloudflare.com/ajax/libs/ng-dialog/0.4.0/css/ngDialog.min.css\n//cdnjs.cloudflare.com/ajax/libs/ng-dialog/0.4.0/css/ngDialog-theme-default.min.css\n//cdnjs.cloudflare.com/ajax/libs/ng-dialog/0.4.0/css/ngDialog-theme-plain.min.css\n//cdnjs.cloudflare.com/ajax/libs/ng-dialog/0.4.0/js/ngDialog.min.js\n```\n\n## References\n\n_ngDialog_ default styles are heavily inspired by awesome [Hubspot/Vex](https://github.com/HubSpot/vex) jQuery modals.\n\n## License\n\nMIT Licensed\n\nCopyright (c) 2013-2015, Likeastore.com <info@likeastore.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/likeastore/ngdialog/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[contributor-guidelines]: https://github.com/likeastore/ngDialog/blob/master/CONTRIBUTING.md\n",
  "_id": "ng-dialog@0.5.9",
  "dist": {
    "shasum": "c37471bfb243d70f4ce77b10019c5b29fe03b5dd"
  },
  "_from": "ng-dialog@^0.5.5",
  "_resolved": "https://registry.npmjs.org/ng-dialog/-/ng-dialog-0.5.9.tgz"
}
